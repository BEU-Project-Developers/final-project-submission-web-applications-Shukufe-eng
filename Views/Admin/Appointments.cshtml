@model IEnumerable<Appointment>
@{
    ViewData["Title"] = "Manage Appointments";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Manage Appointments</h2>
                <a href="@Url.Action("Dashboard", "Admin")" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back to Dashboard
                </a>
            </div>

            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">All Appointments</h5>
                </div>
                <div class="card-body">
                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>ID</th>
                                        <th>Patient</th>
                                        <th>Doctor</th>
                                        <th>Date</th>
                                        <th>Time</th>
                                        <th>Status</th>
                                        <th>Notes</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var appointment in Model)
                                    {
                                        <tr id="appointment-@appointment.Id">
                                            <td>@appointment.Id</td>
                                            <td>
                                                <div>
                                                    <strong>@appointment.Patient.FirstName @appointment.Patient.LastName</strong><br>
                                                    <small class="text-muted">@appointment.Patient.Email</small>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@appointment.Doctor.Name</strong><br>
                                                    <small class="text-muted">@appointment.Doctor.Specialization</small>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="appointment-date">@appointment.AppointmentDate.ToString("MMM dd, yyyy")</span>
                                            </td>
                                            <td>
                                                <span class="appointment-time">@appointment.AppointmentTime</span>
                                            </td>
                                            <td>
                                                <select class="form-select form-select-sm status-select" 
                                                        data-appointment-id="@appointment.Id" 
                                                        data-current-status="@appointment.Status">                                                    @foreach (AppointmentStatus status in Enum.GetValues<AppointmentStatus>())
                                                    {
                                                        if (appointment.Status == status)
                                                        {
                                                            <option value="@status" selected>@status</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@status">@status</option>
                                                        }
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <div class="notes-container">
                                                    <textarea class="form-control form-control-sm appointment-notes" 
                                                              data-appointment-id="@appointment.Id" 
                                                              rows="2" 
                                                              placeholder="Add notes...">@appointment.Notes</textarea>
                                                    <button class="btn btn-sm btn-outline-primary mt-1 save-notes-btn" 
                                                            data-appointment-id="@appointment.Id">
                                                        Save Notes
                                                    </button>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="btn-group-vertical" role="group">
                                                    <button class="btn btn-sm btn-outline-warning reschedule-btn" 
                                                            data-appointment-id="@appointment.Id"
                                                            data-bs-toggle="modal" 
                                                            data-bs-target="#rescheduleModal">
                                                        <i class="bi bi-calendar-event"></i> Reschedule
                                                    </button>
                                                    @if (appointment.Status == AppointmentStatus.Scheduled)
                                                    {
                                                        <button class="btn btn-sm btn-outline-success confirm-btn" 
                                                                data-appointment-id="@appointment.Id">
                                                            <i class="bi bi-check-circle"></i> Confirm
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-calendar-x fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No appointments found</h5>
                            <p class="text-muted">There are no appointments in the system yet.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Reschedule Modal -->
<div class="modal fade" id="rescheduleModal" tabindex="-1" aria-labelledby="rescheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rescheduleModalLabel">Reschedule Appointment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="rescheduleForm">
                    <input type="hidden" id="rescheduleAppointmentId" />
                    <div class="mb-3">
                        <label for="newDate" class="form-label">New Date</label>
                        <input type="date" class="form-control" id="newDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="newTime" class="form-label">New Time</label>
                        <select class="form-select" id="newTime" required>
                            <option value="">Select time...</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmReschedule">Reschedule</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
$(document).ready(function() {
    // Handle status change
    $('.status-select').on('change', function() {
        const appointmentId = $(this).data('appointment-id');
        const newStatus = $(this).val();
        const currentStatus = $(this).data('current-status');
        
        if (newStatus !== currentStatus.toString()) {
            updateAppointmentStatus(appointmentId, newStatus, $(this));
        }
    });

    // Handle save notes
    $('.save-notes-btn').on('click', function() {
        const appointmentId = $(this).data('appointment-id');
        const notes = $(`.appointment-notes[data-appointment-id="${appointmentId}"]`).val();
        updateAppointmentNotes(appointmentId, notes, $(this));
    });

    // Handle quick confirm
    $('.confirm-btn').on('click', function() {
        const appointmentId = $(this).data('appointment-id');
        const statusSelect = $(`.status-select[data-appointment-id="${appointmentId}"]`);
        statusSelect.val('Confirmed').trigger('change');
    });

    // Handle reschedule modal
    $('.reschedule-btn').on('click', function() {
        const appointmentId = $(this).data('appointment-id');
        $('#rescheduleAppointmentId').val(appointmentId);
        
        // Clear previous selections
        $('#newDate').val('');
        $('#newTime').empty().append('<option value="">Select time...</option>');
    });

    // Handle date change in reschedule modal
    $('#newDate').on('change', function() {
        const appointmentId = $('#rescheduleAppointmentId').val();
        const selectedDate = $(this).val();
        
        if (selectedDate) {
            // Get doctor ID from the appointment (you'll need to pass this data)
            // For now, we'll get available slots for the selected date
            loadAvailableTimeSlots(selectedDate);
        }
    });

    // Handle reschedule confirmation
    $('#confirmReschedule').on('click', function() {
        const appointmentId = $('#rescheduleAppointmentId').val();
        const newDate = $('#newDate').val();
        const newTime = $('#newTime').val();
        
        if (newDate && newTime) {
            rescheduleAppointment(appointmentId, newDate, newTime);
        } else {
            showAlert('Please select both date and time.', 'danger');
        }
    });
});

function updateAppointmentStatus(appointmentId, status, element) {
    $.ajax({
        url: '@Url.Action("UpdateAppointmentStatus", "Admin")',
        type: 'POST',
        data: {
            appointmentId: appointmentId,
            status: status
        },
        success: function(response) {
            if (response.success) {
                showAlert(response.message, 'success');
                element.data('current-status', status);
                
                // Update the row styling based on status
                updateRowStyling(appointmentId, status);
            } else {
                showAlert(response.message, 'danger');
                // Revert the select to previous value
                element.val(element.data('current-status'));
            }
        },
        error: function() {
            showAlert('Error updating appointment status.', 'danger');
            element.val(element.data('current-status'));
        }
    });
}

function updateAppointmentNotes(appointmentId, notes, button) {
    const originalText = button.html();
    button.html('<i class="bi bi-hourglass-split"></i> Saving...').prop('disabled', true);
    
    $.ajax({
        url: '@Url.Action("UpdateAppointmentNotes", "Admin")',
        type: 'POST',
        data: {
            appointmentId: appointmentId,
            notes: notes
        },
        success: function(response) {
            if (response.success) {
                showAlert(response.message, 'success');
                button.html('<i class="bi bi-check"></i> Saved').removeClass('btn-outline-primary').addClass('btn-success');
                setTimeout(() => {
                    button.html(originalText).removeClass('btn-success').addClass('btn-outline-primary');
                }, 2000);
            } else {
                showAlert(response.message, 'danger');
            }
        },
        error: function() {
            showAlert('Error updating appointment notes.', 'danger');
        },
        complete: function() {
            button.prop('disabled', false);
        }
    });
}

function loadAvailableTimeSlots(date) {
    // This would need the doctor ID - for now showing all standard slots
    const timeSlots = [
        '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
        '12:00', '12:30', '14:00', '14:30', '15:00', '15:30',
        '16:00', '16:30', '17:00', '17:30'
    ];
    
    const timeSelect = $('#newTime');
    timeSelect.empty().append('<option value="">Select time...</option>');
    
    timeSlots.forEach(time => {
        timeSelect.append(`<option value="${time}">${time}</option>`);
    });
}

function rescheduleAppointment(appointmentId, newDate, newTime) {
    $('#confirmReschedule').prop('disabled', true).html('<i class="bi bi-hourglass-split"></i> Rescheduling...');
    
    $.ajax({
        url: '@Url.Action("RescheduleAppointment", "Admin")',
        type: 'POST',
        data: {
            appointmentId: appointmentId,
            newDate: newDate,
            newTime: newTime
        },
        success: function(response) {
            if (response.success) {
                showAlert(response.message, 'success');
                $('#rescheduleModal').modal('hide');
                
                // Update the display
                $(`#appointment-${appointmentId} .appointment-date`).text(new Date(newDate).toLocaleDateString());
                $(`#appointment-${appointmentId} .appointment-time`).text(newTime);
                
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert(response.message, 'danger');
            }
        },
        error: function() {
            showAlert('Error rescheduling appointment.', 'danger');
        },
        complete: function() {
            $('#confirmReschedule').prop('disabled', false).html('Reschedule');
        }
    });
}

function updateRowStyling(appointmentId, status) {
    const row = $(`#appointment-${appointmentId}`);
    
    // Remove existing status classes
    row.removeClass('table-success table-warning table-danger table-secondary table-info');
    
    // Add new status class
    switch(status) {
        case 'Confirmed':
            row.addClass('table-success');
            break;
        case 'InProgress':
            row.addClass('table-warning');
            break;
        case 'Completed':
            row.addClass('table-secondary');
            break;
        case 'Cancelled':
        case 'NoShow':
            row.addClass('table-danger');
            break;
        default:
            row.addClass('table-info');
    }
}

function showAlert(message, type) {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    // Remove existing alerts
    $('.alert').remove();
    
    // Add new alert at the top of the page
    $('.col-12').first().prepend(alertHtml);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
        $('.alert').fadeOut();
    }, 5000);
}
</script>
}

<style>
.table td {
    vertical-align: middle;
}

.notes-container {
    min-width: 200px;
}

.appointment-notes {
    resize: vertical;
    min-height: 60px;
}

.btn-group-vertical .btn {
    margin-bottom: 2px;
}

.btn-group-vertical .btn:last-child {
    margin-bottom: 0;
}

.status-select {
    min-width: 120px;
}

.table-responsive {
    border-radius: 0.375rem;
}

.card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border-radius: 0.5rem;
}
</style>
